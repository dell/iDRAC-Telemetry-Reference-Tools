version: "3.9"

######
# core services: activemq, mysqldb, configui, dbdiscauth, redfishread
#
# The core services are started for every profile. Additionally specify the
# profile for any backend databases, or start up a test database with the
# following profiles:
#    - influx-test-db  -->  also starts:
#       - influx-pump
#       - grafana
#    - prometheus-test-db  --> also starts:
#       - prometheus-pump
#       - grafana
#    - influx-pump
#    - prometheus-pump
#    - splunk-pump
#    - elk-pump (currently broken?)
#    - grafana
######

x-env-mysql: &mysql-env
  MYSQL_DATABASE: "telemetrysource_services_db"
  MYSQL_USER: "reftools"
  MYSQL_PASSWORD:
  MYSQL_HOST: "mysqldb"
  MYSQL_HOST_PORT: "3306"

x-env-messagebus: &messagebus-env
  MESSAGEBUS_HOST: activemq
  MESSAGEBUS_PORT: 61613

x-env-influx: &influx-env
  INFLUXDB_DB: poweredge_telemetry_metrics
  INFLUXDB_URL: http://influx:8086
  INFLUX_ORG: my-org
  INFLUX_HOST: influx
  INFLUX_BUCKET: my-org-bucket

x-env-influx-setup: &influx-setup-env
  node.name: influx
  DOCKER_INFLUXDB_INIT_MODE: setup
  DOCKER_INFLUXDB_INIT_USERNAME: admin
  DOCKER_INFLUXDB_INIT_ORG: my-org
  DOCKER_INFLUXDB_INIT_BUCKET: my-org-bucket
  INFLUXDB_HTTP_AUTH_ENABLED: 1
  DOCKER_INFLUXDB_INIT_ADMIN_TOKEN:
  DOCKER_INFLUXDB_INIT_PASSWORD:

x-env-grafana: &grafana-env
  GRAFANA_URL: http://grafana:3000

x-arg-base: &base-args
  USER_ID: ${USER_ID:-0}
  GROUP_ID: ${GROUP_ID:-0}
  USERNAME: telemetry
  GROUPNAME: telemetry

x-build-base: &base-build
    context: .
    dockerfile: docker-compose-files/Dockerfile
    args:
      <<: *base-args

x-refdaemon: &refdaemon
  user: telemetry:telemetry
  build:
    <<: *base-build
  profiles:
    - core
  environment:
    <<: *messagebus-env
  depends_on:
    - mysqldb
    - activemq
  networks:
    - host-bridge-net

networks:
  host-bridge-net:
    driver: bridge

volumes:
  influxdb-storage:
  grafana-storage:
  prometheus-data:
  mysqldb-volume:
  dashboards:

services:
  activemq:
    container_name: activemq
    image: rmohr/activemq:latest
    profiles:
      - core
    networks:
      - host-bridge-net
    ports:
      - "8161:8161"

  mysqldb:
    container_name: mysqldb
    image: mysql:latest
    profiles:
      - core
    restart: always
    environment:
      <<: *mysql-env
      MYSQL_ROOT_PASSWORD:
    networks:
      - host-bridge-net
    volumes:
      - mysqldb-volume:/var/lib/mysql:rw

  configui:
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/configui:latest
    build:
      <<: *base-build
      dockerfile: docker-compose-files/Dockerfile.configui
      args:
        <<: *base-args
        CMD: configui
    environment:
      <<: *mysql-env
      <<: *messagebus-env
      CONFIGUI_HTTP_PORT: 8082       #sample reference - specify web application port
    ports:
      - "8080:8082"


  dbdiscauth:
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/dbdiscauth:latest
    environment:
      <<: *messagebus-env
      <<: *mysql-env
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: dbdiscauth


  redfishread:
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/redfishread:latest
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: redfishread


  influx:
    ############################################################################
    # INFLUX - start an influx db backend. for testing mostly
    #
    # Add this to your docker-compose cli args:
    #   --profile influx-test-db
    #
    # Starting the 'influx-test-db' profile will automatically start:
    #   - influx pump
    #   - influx test database
    #   - grafana dashboard
    #
    ############################################################################
    #
    #  From influx docs:
    #  "The InfluxDB image supports running arbitrary initialization scripts
    #  after initial system setup, on both the setup and upgrade paths. Scripts
    #  must have extension .sh and be mounted inside of the
    #  /docker-entrypoint-initdb.d directory. When multiple scripts are
    #  present, they will be executed in lexical sort order by name."
    #
    container_name: telemetry-reference-tools-influx
    image: influxdb:latest
    profiles:
      - influx-test-db
      - setup-influx-test-db
    volumes:
      - influxdb-storage:/var/lib/influxdb
    environment:
      <<: *influx-env
      <<: *influx-setup-env
    networks:
      - host-bridge-net
    ports:
      - "8086:8086"
    healthcheck:
      test: curl http://localhost:8086 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5


  influx-pump-standalone: &influx-pump
    ############################################################################
    # INFLUX PUMP - starts the data pump for influx
    #    This is automatically started with the influx-test-db
    #    Manually start this profile if you want to point to an external server
    #
    # Add this to your docker-compose cli args:
    #   --profile influx-pump
    #
    # If you want to connect to an external influx database, set the following
    # environment variables:
    #
    #  INFLUXDB_DB: <name-of-influx-database>
    #  INFLUXDB_URL: http://influxdb:8086
    #
    ############################################################################
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/influxpump:latest
    restart: always
    depends_on:
      - activemq
    environment:
      <<: *messagebus-env
      # set these environment variables using docker command line if using external influx
      INFLUXDB_DB:
      INFLUXDB_URL:
      INFLUX_ORG:
      INFLUX_HOST:
      INFLUX_BUCKET:
      INFLUX_TOKEN:
    env_file:
      - ${PWD}/docker-compose-files/container-info-influx-pump.txt
    profiles:
      - influx-pump
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: influxpump

  influx-pump-withtestserver:
    <<: *influx-pump
    environment:
      <<: *messagebus-env
    env_file:
      - ${PWD}/docker-compose-files/container-info-influx-pump.txt
    depends_on:
      - influx
      - activemq
    profiles:
      - influx-test-db

  setup-influx-pump:
    build:
      <<: *base-build
      dockerfile: docker-compose-files/Dockerfile.setup
    image: idrac-telemetry-reference-tools/setup:latest
    profiles:
      - setup-influx-test-db
    depends_on:
      - influx
      - activemq
    restart: "no"
    environment:
      <<: *influx-env
      <<: *influx-setup-env
    networks:
      - host-bridge-net
    volumes:
      - type: bind
        source: ${PWD}/docker-compose-files/initialize_influx_pump.sh
        target: /extrabin/initialize_influx_pump.sh
        read_only: true
      - type: bind
        source: ${PWD}/docker-compose-files/container-info-influx-pump.txt
        target: /config/container-info-influx-pump.txt
    entrypoint: ["/extrabin/initialize_influx_pump.sh"]
    command: []

  grafana:
    ############################################################################
    # GRAFANA - graphical dashboard for timeseries
    #    This is automatically started with the influx-test-db
    #    Manually start this if you want to point a grafana dashboard at an
    #      external server
    #
    # Add this to your docker-compose cli args:
    #   --profile grafana
    #
    # If you want to connect to an external influx database, set the following
    # environment variables:
    #
    #  INFLUXDB_DB: <name-of-influx-database>
    #  INFLUXDB_URL: http://influxdb:8086
    #
    ############################################################################

    # grafana runs as root in latest version. *sigh*
     # Polystat plugin install doesnt work with prior versions of Grafana. Grafana 9.0.1 is just released on 2022-06-21
    container_name: telemetry-reference-tools-grafana
    image: grafana/grafana:9.0.1
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./:/var/lib/grafana/grafana-polystat-panel
      - ./grafana-provisioning/:/etc/grafana/provisioning
    profiles:
      - grafana
      - setup-influx-test-db
      - influx-test-db
      - prometheus-test-db
      - timescale-test-db
    depends_on:
      - influx
    environment:
      <<: *influx-env
      <<: *grafana-env
      GF_INSTALL_PLUGINS: grafana-polystat-panel
    ports:
      - "3000:3000"
    networks:
      - host-bridge-net

  grafana-setup-influx-datasource:
    build:
      <<: *base-build
      dockerfile: docker-compose-files/Dockerfile.setup
    image: idrac-telemetry-reference-tools/setup:latest
    profiles:
      - setup-influx-test-db
    depends_on:
      - influx
      - grafana
    restart: "no"
    environment:
      <<: *influx-env
      <<: *influx-setup-env
      <<: *grafana-env
    networks:
      - host-bridge-net
    volumes:
      - type: bind
        source: ${PWD}/docker-compose-files/initialize_grafana_influx_datasource.sh
        target: /extrabin/initialize_grafana_influx_datasource.sh
        read_only: true
      - type: bind
        source: ${PWD}/docker-compose-files/container-info-grafana.txt
        target: /config/container-info-grafana.txt
      - type: bind
        source: ${PWD}/dashboards
        target: /dashboardstgt
    entrypoint: ["/extrabin/initialize_grafana_influx_datasource.sh"]
    command: []

  prometheus:
    ############################################################################
    # PROMETHEUS - test prometheus database
    #    This is automatically started with the prometheus-test-db
    #
    # Add this to your docker-compose cli args:
    #   --profile prometheus-test-db
    #
    # If you want to connect to an external prometheus database,
    # set the following environment variables:
    #
    # TODO: add
    #
    ############################################################################
    image: prom/prometheus:v2.36.0
    restart: always
    container_name: prometheus
    profiles:
      - prometheus-test-db
    volumes:
      - type: bind
        source: ${PWD}/cmd/prometheuspump/prometheus.yml
        target: /config/prometheus.yml
        read_only: true
      - prometheus-data:/prometheus
    environment:
      - node.name=prometheus
      - PROMETHEUS_DB=poweredge_telemetry_metrics
    command:
      - '--config.file=/config/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"  
    networks:
      - host-bridge-net


  prometheus-pump-standalone: &prometheus-pump
    ############################################################################
    # PROMETHEUS PUMP - data pump to pump telemetry into prometheus
    #    This is automatically started with the prometheus-test-db
    #    Manually start this profile if you want to point to an external server
    #
    # Add this to your docker-compose cli args:
    #   --profile prometheus-pump
    #
    # If you want to connect to an external prometheus database,
    # set the following environment variables:
    #
    #  PROMETHEUSDB_SERVER: prometheus-hostname
    #
    ############################################################################
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/prometheuspump:latest
    profiles:
      - prometheus-pump
    depends_on:
      - activemq
    environment:
      <<: *messagebus-env
      PROMETHEUSDB_SERVER: prometheus
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: prometheuspump
    ports:
      - "2112:2112"    

  prometheus-pump-withtestserver:
    container_name: prometheus-ingester
    <<: *prometheus-pump
    depends_on:
      - prometheus
      - activemq
    profiles:
      - prometheus-test-db

  splunk-pump-standalone:
    ############################################################################
    # SPLUNK PUMP - data pump to pump telemetry into splunk
    #    Manually start this profile if you want to point to an external server
    #
    # Add this to your docker-compose cli args:
    #   --profile splunk-pump
    #
    # If you want to connect to an external splunk database,
    # set the following environment variables:
    #
    # TODO: add
    #
    ############################################################################
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/splunkpump:latest
    profiles:
      - splunk-pump
    depends_on:
      - activemq
    environment:
      <<: *messagebus-env
      SPLUNK_HEC_URL: ${SPLUNK_HEC_URL}
      SPLUNK_HEC_KEY: ${SPLUNK_HEC_KEY}
      SPLUNK_HEC_INDEX: ${SPLUNK_HEC_INDEX}
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: splunkpump

  elk-pump-standalone: &elk-pump
    ############################################################################
    # ELK PUMP - telemetry data pump for elk
    #    Manually start this profile if you want to point to an external server
    #
    # Add this to your docker-compose cli args:
    #   --profile elk-pump
    #
    # If you want to connect to an external ELK instance,
    # set the following environment variables:
    #
    # TODO: add
    #
    ############################################################################
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/elkpump:latest
    environment:
      <<: *messagebus-env
      ELASTICSEARCH_URL: http://es01:9200
    profiles:
      - elk-pump
    depends_on:
      - activemq
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: elkpump-basic

  elk-pump-withtestserver:
    <<: *elk-pump
    environment:
      <<: *messagebus-env
      ELASTICSEARCH_URL: http://es01:9200
    profiles:
      - elk-test-db
    depends_on:
      - es01
      - activemq
    

  es01:
    ############################################################################
    # ELASTIC SEARCH - test elk instance
    #
    # Add this to your docker-compose cli args:
    #   --profile elk-test-db
    #
    # NOTE: CURRENTLY BROKEN ON INTERNAL DEV SERVERS, CANT TEST:
    #
    #   es02              | ERROR: [1] bootstrap checks failed
    #   es02              | [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
    #   es02              | ERROR: Elasticsearch did not exit normally - check the logs at /usr/share/elasticsearch/logs/es-docker-cluster.log
    #
    ############################################################################
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: es01
    profiles:
      - elk-test-db
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - host-bridge-net

    healthcheck:
      test: curl http://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    #mount deployed mysql filesystem location for persistance

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: es02
    profiles:
      - elk-test-db
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - host-bridge-net
    #mount deployed mysql filesystem location for persistance

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    container_name: es03
    profiles:
      - elk-test-db
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - host-bridge-net
    #mount deployed mysql filesystem location for persistance

  kib01:
    image: docker.elastic.co/kibana/kibana:7.10.1
    container_name: kib01
    profiles:
      - elk-test-db
    depends_on:
      - es01
      - es02
      - es03
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: http://es01:9200
    networks:
      - host-bridge-net
    ports:
      - "5601:5601"


  timescale:
    ############################################################################
    # TIMESCALE - test timescale database
    #    This is automatically started with the timescale-test-db
    #
    # Add this to your docker-compose cli args:
    #   --profile timescale-test-db
    #
    # If you want to connect to an external prometheus database,
    # set the following environment variables:
    #
    # TODO: add
    #
    ############################################################################
    image: timescale/timescaledb:latest-pg12
    container_name: timescale
    profiles:
      - timescale-test-db
    restart: always
    environment:
      - node.name=timescale
      - POSTGRES_USER=postgres
      - POSTGRES_PASS=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
      - TIMESCALE_DB=poweredge_telemetry_metrics
    networks:
      - host-bridge-net
    ports:
      - "5432:5432"

  timescale-setup:
    image: timescale/timescaledb:latest-pg12
    restart: "no"
    profiles:
      - timescale-test-db
    depends_on:
      - timescale
    environment:
      - node.name=timescale
      - POSTGRES_HOST=timescale
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASS=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
      - TIMESCALE_DB=poweredge_telemetry_metrics
    volumes:
      - type: bind
        source: ${PWD}/cmd/timescalepump/initialize_timescaledb.sh
        target: /extrabin/initialize_timescaledb.sh
        read_only: true
    entrypoint: ["/extrabin/initialize_timescaledb.sh"]
    networks:
      - host-bridge-net


  timescale-pump-standalone: &timescale-pump
    ############################################################################
    # TIMESCALE PUMP - telemetry data pump for Timescale
    #    Manually start this profile if you want to point to an external server
    #
    # Add this to your docker-compose cli args:
    #   --profile timescale-pump
    #
    # If you want to connect to an external Timescale instance,
    # set the following environment variables:
    #
    # TODO: add
    #
    ############################################################################
    <<: *refdaemon
    image: idrac-telemetry-reference-tools/timescale-pump:latest
    profiles:
      - timescale-pump
    depends_on:
      - activemq
    build:
      <<: *base-build
      args:
        <<: *base-args
        CMD: timescalepump

  timescale-pump-withtestserver:
    <<: *timescale-pump
    profiles:
      - timescale-test-db
    depends_on:
      - activemq
      - timescale
    environment:
      <<: *messagebus-env
      POSTGRES_USER: postgres
      POSTGRES_DEFAULT_PWD: postgres
      TIMESCALE_SERVER: timescale
      POSTGRES_HOST_AUTH_METHOD: trust
      TIMESCALE_DB: poweredge_telemetry_metrics


# using dbdiscauth for now. dont need simple*
#
#  simpleauth:
#    <<: *refdaemon
#    image: idrac-telemetry-reference-tools/simpleauth:latest
#    build:
#      <<: *base-build
#      args:
#        <<: *base-args
#        CMD: simpleauth
#
#
#  simpledisc:
#    <<: *refdaemon
#    image: idrac-telemetry-reference-tools/simpledisc:latest
#    build:
#      <<: *base-build
#      args:
#        <<: *base-args
#        CMD: simpledisc
